sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date)
View(sales_pipe)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format = "%y%m%d"
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="%y%m%d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="%d%m%y"
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
View(sales_pipe)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="%d%m%y"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date,
format="$y$m$d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
sales_pipe$Ship.Date <- as.Date(sales_pipe$Ship.Date
,format='%y%m%d'
)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,encoding = "ISO-8859-1"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%y%m%d'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m%d%y'
)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
sales_pipe$Ship.Date <- as.Date(sales_pipe$Ship.Date
,format ='%y%m%d'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m%d%y'
)
summary(sales_pipe)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
# Your code here
sales_pipe$Ship.Date <- as.Date(sales_pipe$Ship.Date
,format ='%y%m%d'
)
View(sales_excel)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
sales_pipe$Ship.Date <- as.Date(sales_pipe$Ship.Date
,format ='%y%m%d'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m%d%y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format = "%y%m%d"
)
# Your code here
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format = "%y%m%d"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format = '%y%m%d'
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format = '%y%m%d'
)
# Your code here'
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format = '%y%m%d'
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here'
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here
sales_pipe$Ship.Date <- as.Date(sales_pipe$Ship.Date
,format='%m/%d/%Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here
sales_pipe$Ship.Date = as.Date(sales$Ship.Date,
format = '%B %d %Y'
)
# Your code here
sales_pipe$Ship.Date = as.Date(sales_pipe$Ship.Date,
format = '%B %d %Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
# Your code here'
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
sales_pipe$Ship.Date = as.Date(sales_pipe$Ship.Date,
format = '%B %d %Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
?as.Date
summary(sales_pipe)
# Your code here
mean(Ship.Date - Order.Date)
# Your code here
mean(sales_pipe$Ship.Date - sales_piep$Order.Date)
# Your code here
mean(sales_pipe$Ship.Date - sales_pipe$Order.Date)
unique(sales_pipe$Customer.Name)
# Your code here
unique(sales_pipe$Customer.Name)
find_bill <- stringr::str_split_fixed(string=sales_pipe$Customer.Name,pattern = " ", n=2)
View(find_bill)
# Your code here
unique(sales_pipe$Customer.Name)
find_bill_df <- stringr::str_split_fixed(string=sales_pipe$Customer.Name,pattern = " ", n=2)
View(find_bill)
# Your code here
unique(sales_pipe$Customer.Name)
find_bill_df <- stringr::str_split_fixed(string=sales_pipe$Customer.Name,pattern = " ", n=2)
length(find_bill_df [find_bill_df == "Bill"])
?length
View(find_bill_df)
# Your code here
stringr::str_count(sales_pipe$Product.ID, "table", function(sum))
?sum
# Your code here
sum(stringr::str_count(sales_pipe$Product.ID, "table"))
# Your code here
sum(stringr::str_count(sales_pipe$Product.ID, "table"))
# Your code here
sum(stringr::str_count(sales_pipe$Product.Name, "table"))
# Your code here
stringr::str_count(sales_pipe$Product.Name, "table")
sum(stringr::str_count(sales_pipe$Product.Name, "table"))
# Your code here
table(sales_pipe$State)
# Your code here
sum(stringr::str_count(sales_pipe$Product.Name, "table"))
# Your code here
Texas_df = sales_pipe(sales_pipe$State == 'Texas', c(sales_state))
# Your code here
Texas_df = sales_pipe(sales_pipe$State == 'Texas', c(sales_column))
# Your code here
Texas_df = sales_pipe[sales_pipe$State == 'Texas', c(sales_column)]
# Your code here
Texas_df = sales_pipe[sales_pipe$State == 'Texas',c(sales_column)]
# Your code here
Texas_df = sales_pipe[sales_pipe$State == 'Texas',c(state)]
# Your code here
Texas_df = sales_pipe[sales_pipe$State=='Texas',c(state)]
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c(state)]
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("Sales")]
View(sales_pipe)
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("category")]
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("Category")]
# Your code here
stringr::str_split_fixed(sales_pipe$Order.ID,pattern = "-", n = "3")
# Your code here
Avg_Profit_yr <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern = "-", n ="3")
# Your code here
Avg_Profit_yr <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
aggregate(sales_pipe$profit, list(sales_pipe$Order.Date), FUN=mean)
View(Avg_Profit_yr)
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split
aggregate(sales_pipe$profit, list(Avg_Profit_yr), FUN=mean)
View(order.date.yr)
View(order.date.split)
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[2]
aggregate(sales_pipe$profit, list(Avg_Profit_yr), FUN=mean)
order.date.yr <- order.date.split[,2]
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[,2]
aggregate(sales_pipe$profit, list(order.date.yr), FUN=mean)
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[,2]
aggregate(sales_pipe$profit ~ list(order.date.yr), FUN=mean)
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[,2]
aggregate(sales_pipe$profit ~ order.date.yr, FUN=mean)
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[,2]
aggregate(sales_pipe$Profit, list(order.date.yr), FUN=mean
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[,2]
aggregate(sales_pipe$Profit, list(order.date.yr), FUN=mean)
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("Category")]
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("Category")]
barplot(table(texas_df))
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("sub.Category")]
barplot(table(texas_df))
texas_df = sales_pipe[sales_pipe$State=='Texas',c("sub.Category")]
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("Category")]
barplot(table(texas_df))
# Your code here'
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
colnames(sales_pipe)
colnames(sales_pipe)[1] <- "Row.ID"
# Your code here'
sales_pipe <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
# Your code here
colnames(sales_pipe)
colnames(sales_pipe)[1] <- "Row.ID"
# Your code here
sales_pipe$Ship.Date = as.Date(sales_pipe$Ship.Date,
format = '%B %d %Y'
)
sales_pipe$Order.Date <- as.Date(sales_pipe$Order.Date
,format='%m/%d/%Y'
)
#I believe you can use the function summary too, that would give you the min and max ONLY after you change the data to a date vector?
summary(sales_pipe)
max(sales_pipe$Order.Date)
min(sales_pipe$Order.Date)
time_1 <- "2017-12-30"
time_2 <- "2014-01-03"
difftime(time_1, time_2, units = "days")
#difftime can't use years as an arg so I used weeks and divided by 52.25 (accounting for leap year) which should result in years
difftime(time_1, time_2, units = "weeks")/52.25
difftime(time_1, time_2, units = "weeks")
# Your code here
mean(sales_pipe$Ship.Date - sales_pipe$Order.Date)
# Your code here
unique(sales_pipe$Customer.Name)
find_bill_df <- stringr::str_split_fixed(string=sales_pipe$Customer.Name,pattern = " ", n=2)
length(find_bill_df [find_bill_df == "Bill"])
# Your code here
sum(stringr::str_count(sales_pipe$Product.Name, "table"))
# Your code here
table(sales_pipe$State)
# Your code here
texas_df = sales_pipe[sales_pipe$State=='Texas',c("Category")]
barplot(table(texas_df))
# Your code here
aggregate(sales_pipe$Profit, list(sales_pipe$Region), FUN=mean)
# Your code here
order.date.split <- stringr::str_split_fixed(sales_pipe$Order.ID,pattern="-",n=3)
order.date.yr <- order.date.split[,2]
aggregate(sales_pipe$Profit, list(order.date.yr), FUN=mean)
