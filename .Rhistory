us_other_salary <- mean_salary_us %>%
full_join(mean_salary_other, by = "salary_us")
View(title_counts)
us_other_salary <- salary_us %>% bind_cols(salary_other)
us_other_salary <- bind_cols(salary_us, salary_other)
_other_salary <- bind_rows(salary_us, salary_other)
us_other_salary <- bind_rows(salary_us, salary_other)
View(us_other_salary)
us_other_salary <- na.omit(us_other_salary)
View(us_other_salary)
salary_us <- filtered_job_data[filtered_job_data$employee_residence
== "US", "salary_in_usd"]
salary_other <-filtered_job_data[filtered_job_data$employee_residence
!= "US", "salary_in_usd"]
salary_other <-as.data.frame(salary_other)
salary_us <- as.data.frame(salary_us)
mean_salary_us <- mean(salary_us$salary_us, na.rm = TRUE)
print(mean_salary_us)
mean_salary_other <- mean(salary_other$salary_other, na.rm = TRUE)
print(mean_salary_other)
us_other_salary <- bind_rows(salary_us, salary_other)
View(us_other_salary)
compared_salary <- data.frame(country = c('us_salary', 'other_salary'),
mean_salary = c(138199.5, 62546.53))
View(compared_salary)
View(salary_other)
salary_us <- filtered_job_data[filtered_job_data$employee_residence
== "US", "salary_in_usd"]
salary_other <-filtered_job_data[filtered_job_data$employee_residence
!= "US", "salary_in_usd"]
salary_other <-as.data.frame(salary_other)
salary_us <- as.data.frame(salary_us)
mean_salary_us <- mean(salary_us$salary_us, na.rm = TRUE)
print(mean_salary_us)
mean_salary_other <- mean(salary_other$salary_other, na.rm = TRUE)
print(mean_salary_other)
compared_salary <- data.frame(country = c('us_salary', 'other_salary'),
mean_salary = c(138199.5, 62546.53))
ggplot(compared_salary, aes(x = country, y = mean_salary, fill = country)) +
geom_bar() +
labs(title = 'US vs. Other Countries Salaries', x = 'Resident Country',
y = 'Salary in USD') +
theme_minimal() +
scale_y_continuous(labels = scales::dollar_format())
ggplot(compared_salary, aes(x = country, y = mean_salary, fill = country)) +
geom_bar(stat = 'identity') +
labs(title = 'US vs. Other Countries Salaries', x = 'Resident Country',
y = 'Salary in USD') +
theme_minimal() +
scale_y_continuous(labels = scales::dollar_format())
ggplot(compared_salary, aes(x = country, y = mean_salary, fill = country)) +
geom_bar(stat = 'identity') +
labs(title = 'US vs. Other Countries Salaries', x = 'Resident Country',
y = 'Salary in USD') +
theme_minimal() +
scale_y_continuous(labels = scales::dollar_format(), breaks =
c(60000, 90000, 120000, 130000))
compared_salary <- data.frame(country = c('US', 'Other Countries'),
mean_salary = c(138199.5, 62546.53))
ggplot(compared_salary, aes(x = country, y = mean_salary, fill = country)) +
geom_bar(stat = 'identity') +
labs(title = 'US vs. Other Countries Salaries', x = 'Resident Country',
y = 'Salary in USD') +
theme_minimal() +
scale_y_continuous(labels = scales::dollar_format(), breaks =
c(60000, 90000, 120000, 130000))
View(title_counts)
#Suggested Salary for Data Science Hire
ggplot(filtered_job_data, aes(x=work_year, y=salary_in_usd)) +
geom_point() +
geom_smooth(method = "lm", aes(y=salary_in_usd, x=work_year)) +
labs(title = "Suggested Salary for Hire", x= "Year", y="Salary") +
facet_grid (~experience_level) +
scale_y_continuous(labels = scales::dollar_format())+
theme(axis.text.x = element_text(angle=45))
gc()
3+3 #addition
3+3 #addition
10 + 15 + 3
#addition
3+3
10 + 15 + 3
#addition
1 + 1
3 + 3
10 + 15 + 3
#subtraction
1 - 1
5 - 3
#subtraction
1 - 1
5 - 3
#multiplication
6 * 6
100 * 50
#division
25 / 5
10 / 3
#multiplication
6 * 6
100 * 50
#division
25 / 5
10 / 3
#using exponents
2 ^ 5
3 ^ 9
#using exponents
2 ^ 5
3 ^ 9
#can also use ** for exponents
2 ** 5
3 ** 9
#combination of operators
25 / 5 + 3 - 2 * 10
#combination of operators (order of operations)
25 / 5 + 3 - 2 * 10
#using paraentheses to control order of operations
25 / 5 + (3 - 2) * 10
#exponents
2 ^ 5
3 ^ 9
#can also use ** for exponents
2 ** 5
3 ** 9
#combination of operators (order of operations)
25 / 5 + 3 - 2 * 10
#using paraentheses to control order of operations
25 / 5 + (3 - 2) * 10
#can use '-' on positive values to get a negative
-3 - 2
5 ^ -2
#using spaces around operators
5 + 2
5+2
5 +2
#do not recommend spaces when using '-' to negate values
3/ - 2
#assigning/store values with variables
(12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
x
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#value is not stored in variable 'x'
x
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#value is not stored in variable 'x'
x
#doing calculation on variable
x * 2
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#value is not stored in variable 'x'
x
#doing calculation on variable
x * 2
#can also assign this calculation to a new variable
y <- x * 2
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#value is not stored in variable 'x'
x
#doing calculation on variable
x * 2
#can also assign this calculation to a new variable
y <- x * 2
y
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
#value is not stored in variable 'x'
x
#doing calculation on variable
x * 2
#can also assign this calculation to a new variable
y <- x * 2
#assignment rule "name <- expression"
y
#naming conventions can consist of more than one character
#"x123", ".x", "x_y_z" would all work
#"_x", ".2x", "x-y-z" would not work
#meaningful short names should be used
age <- 29
income <- 38575.65
is_married <- TRUE
years_married <- 7
#Creating Vectors
primes <- c(2,3,5,7,9,11,13,17)
#Operations on vectors
primes + 1
#Creating Vectors
primes <- c(2,3,5,7,9,11,13,17)
#Operations on vectors
primes + 1
primes / 2
primes ^ 2
#indexing
primes[3]
primes[4]
#indexing elements
primes[3]
primes[4]
#indexing sets of elements
primes[c(3,4)]
#indexing elements
primes[3]
primes[4]
#indexing sets of elements
primes[c(3,4)]
#indexing consecutive sets of elements
primes[c(2:6)]
#indexing elements
primes[3]
primes[4]
#indexing sets of elements
primes[c(3,4)]
#indexing consecutive sets of elements
primes[c(2:6)]
#can use negative index also
primes[-3]
primes[-c(2:6)]
#indexing elements
primes[3]
primes[4]
#indexing sets of elements
primes[c(3,4)]
#indexing consecutive sets of elements
primes[c(2:6)]
#can use negative index also
primes[-3]
primes[-c(3,4)]
#indexing elements
primes[3]
primes[4]
#indexing sets of elements
primes[c(3,4)]
#indexing consecutive sets of elements
primes[c(2:6)]
#can use negative index also
primes[-3]
#returns all elements EXCEPT one mentioned
primes[-c(3,4)]
#single valued vectors
x[1]
#character vectors
nation <- c('united states', 'vietnam', 'japan', 'spain)
class(nation)
class(primes)
#character vectors
nation <- c('united states', 'vietnam', 'japan', 'spain')
class(nation)
class(primes)
#character vectors
nation <- c('united states', 'vietnam', 'japan', 'spain')
class(nation)
class(primes)
#indexing char. vectors
nation[2]
#logical vectors
is_female <- c(FALSE, TRUE, FALSE, FALSE, TRUE)
class(is_female)
#logical vectors
is_female <- c(FALSE, TRUE, FALSE, FALSE, TRUE)
class(is_female)
is_female[4] #indexing
is_female * 2
#logical vectors
is_female <- c(FALSE, TRUE, FALSE, FALSE, TRUE)
class(is_female)
is_female[4] #indexing
is_female * 2 #operations on logical vectors
result <- is_female * 2
class(result)
#logical vectors
is_female <- c(FALSE, TRUE, FALSE, FALSE, TRUE)
class(is_female)
is_female[4] #indexing
is_female * 2 #operations on logical vectors
result <- is_female * 2
class(result) #returns a numeric class
TRUE & FALSE #checks if both are true
TRUE & TRUE
#logical vectors
is_female <- c(FALSE, TRUE, FALSE, FALSE, TRUE)
class(is_female)
is_female[4] #indexing
is_female * 2 #operations on logical vectors
result <- is_female * 2
class(result) #returns a numeric class
TRUE & FALSE #checks if both are true
TRUE | FALSE #checks if one is true
!TRUE #negates logical value
#equality/inequality operataions
15 == (3*5)
15 != (3*5)
#equality/inequality operataions
15 == (3*5)
15 != (3*5) #'!=' means not equal
primes <= 1 #'< or >" greater or less than
#equality/inequality operataions
15 == (3*5)
15 != (3*5) #'!=' means not equal
primes <= 1 #'< or >" greater or less than
nation <= 'vietnam'
c(2.75, 11.3, TRUE, FALSE, 'dog', 'cat')
#elements will be coercing into other types
c(primes, primes*2) #combining vectors
c(primes, primes*2) #combining vectors
ages <- c(nelson = 21, tony = 22, johnny = 23)
ages
c(primes, primes*2) #combining vectors
ages <- c(nelson = 21, tony = 22, johnny = 23)
ages #naming vectors
ages['nelson'] #acessing vector values
ages2 <- c(21,22,23)
names2(ages2) <- c('nelson','tony','johnny')
c(primes, primes*2) #combining vectors
ages <- c(nelson = 21, tony = 22, johnny = 23)
ages #naming vectors
ages['nelson'] #acessing vector values
ages2 <- c(21,22,23)
names(ages2) <- c('nelson','tony','johnny')
ages2
c(primes, primes*2) #combining vectors
ages <- c(nelson = 21, tony = 22, johnny = 23)
ages #naming vectors
ages['nelson'] #acessing vector values
ages2 <- c(21,22,23)
names(ages2) <- c('nelson','tony','johnny')
ages2 #using names function to add names
h <- c(1,NA,3) #NA can be used for missing values
data_df <- data.frame(name=c('nelson','tony','johnny'),
age=c(21,22,23))
data_df #creating a data frame
c(primes, primes*2) #combining vectors
ages <- c(nelson = 21, tony = 22, johnny = 23)
ages #naming vectors
ages['nelson'] #acessing vector values
ages2 <- c(21,22,23)
names(ages2) <- c('nelson','tony','johnny')
ages2 #using names function to add names
h <- c(1,NA,3) #NA can be used for missing values
c(2.75, 11.3, TRUE, FALSE, 'dog', 'cat')
#elements will be coercing into other types
#can use '-' on positive values to get a negative
-3 - 2
5 ^ -2
#using spaces around operators
5 + 2
5+2
5 +2
#do not recommend spaces when using '-' to negate values
3/ - 2
#assigning/store values with variables
x <- (12/3.5)^2 + (1/2.5)^3 + (1+2+3)^0.33
x #value is stored in variable 'x'
x * 2 #doing calculation on variable
y <- x * 2 #can also assign this calculation to a new variable
#assignment rule "name <- expression"
y
#naming conventions can consist of more than one character
#"x123", ".x", "x_y_z" would all work
#"_x", ".2x", "x-y-z" would not work
#meaningful short names should be used
age <- 29
income <- 38575.65
is_married <- TRUE
years_married <- 7
primes <- c(2,3,5,7,9,11,13,17) #Creating Vectors
#Operations on vectors
primes + 1
primes / 2
primes ^ 2
#indexing elements
primes[4]
#indexing sets of elements
primes[c(3,4)]
#indexing consecutive sets of elements
primes[c(2:6)]
#negative index returns all elements EXCEPT one mentioned
primes[-3]
primes[-c(3,4)]
#single valued vectors
x[1]
#variables can be indexed also
#character vectors
nation <- c('united states', 'vietnam', 'japan', 'spain')
class(nation)
class(primes)
#indexing char. vectors
nation[2]
#logical vectors
is_female <- c(FALSE, TRUE, FALSE, FALSE, TRUE)
class(is_female)
is_female[4] #indexing
is_female * 2 #operations on logical vectors
result <- is_female * 2
class(result) #returns a numeric class
TRUE & FALSE #checks if both are true
TRUE | FALSE #checks if one is true
!TRUE #negates logical value
#equality/inequality operataions
15 == (3*5)
15 != (3*5) #'!=' means not equal
primes <= 1 #'< or >" greater or less than
nation <= 'vietnam' #uses alphabetical order
data_df <- data.frame(name=c('nelson','tony','johnny'),
age=c(21,22,23))
data_df #creating a data frame
data_df[3,2] #element, 3rd row, 2nd column
data_df[c(1,3),2]#1st & 3rd row, 2nd column
data_df[3, ] #only 3rd row
ex_list <- list(A=TRUE, B=c(1,2,3), C=c('cat','dog'))
ex_list #creating list
data_df <- data.frame(name=c('nelson','tony','johnny'),
age=c(21,22,23))
data_df #creating a data frame
data_df[3,2] #element, 3rd row, 2nd column
data_df[c(1,3),2]#1st & 3rd row, 2nd column
data_df[3, ] #only 3rd row, can do same with columns
data_df$age #referring to column by name
#can also use double brackets if needed
data_df['age']#different output than other methods
ex_list <- list(A=TRUE, B=c(1,2,3), C=c('cat','dog'))
ex_list #creating list
#can refer to elements the same way as data frames
ex_list[['B']] #example
matrix(c(2,3,5,7,11,13,19,23,29),
nrow=2,ncol=5) #creating matrix
rbind(c(1,2),c(3,4)) #creating matrix using row bind
cbind(c(1,2),c(3,4)) #creating matrix using col bind
primes_m <- matrix(c(2,3,5,7,11,13,19,23,29),
byrow = T,
nrow=2,ncol=5)
primes_m[1,3] #indexing similar to data frames
matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5) #creating matrix
rbind(c(1,2),c(3,4)) #creating matrix using row bind
cbind(c(1,2),c(3,4)) #creating matrix using col bind
primes_m <- matrix(c(2,3,5,7,11,13,17,19,23,29),
byrow = T,
nrow=2,ncol=5)
primes_m[1,3] #indexing similar to data frames
matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5) #creating matrix
rbind(c(1,2),c(3,4)) #creating matrix using row bind
cbind(c(1,2),c(3,4)) #creating matrix using col bind
primes_m <- matrix(c(2,3,5,7,11,13,17,19,23,29),
byrow = T,
nrow=2,ncol=5)
primes_m[1,2] #indexing similar to data frames
matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5) #creating matrix
rbind(c(1,2),c(3,4)) #creating matrix using row bind
cbind(c(1,2),c(3,4)) #creating matrix using col bind
primes_m <- matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5)
primes_m[1,2] #indexing similar to data frames
matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5) #creating matrix
rbind(c(1,2),c(3,4)) #creating matrix using row bind
cbind(c(1,2),c(3,4)) #creating matrix using col bind
primes_m <- matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5)
primes_m[1,2] #indexing similar to data frames
matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5) #creating matrix
rbind(c(1,2),c(3,4)) #creating matrix using row bind
cbind(c(1,2),c(3,4)) #creating matrix using col bind
primes_m <- matrix(c(2,3,5,7,11,13,17,19,23,29),
nrow=2,ncol=5)
primes_m[1,3] #indexing similar to data frames
ex_array <- array(c(1,2,3,4,5,6,7,8)
dim = c(2,2,2))
ex_array <- array(c(1,2,3,4,5,6,7,8),
dim = c(2,2,2))
ex_array <- array(c(1,2,3,4,5,6,7,8),
dim = c(2,2,2))
ex_array
ex_array <- array(c(1,2,3,4,5,6,7,8),
dim = c(2,2,2)) #creating array
ex_array[1,2,1] #index but with 3 numbers
#functions
length(primes)
#functions
length(primes), sum(primes)
#functions
length(primes) sum(primes)
#functions
length(primes)&sum(primes)
#functions
length(primes)
sum(primes)
mean(primes)
median(primes)
sd(primes)
var(primes)
mean_primes <- function(x){sum(primes)/length(primes)}
mean_primes <- function(x){sum(primes)/length(primes)}
mean_primes
mean_primes <- function(primes){sum(primes)/length(primes)}
mean_primes
mean_primes <- function(x){sum(x)/length(x)}
mean_primes(primes)
install.packages('tidyverse')
#install.packages('x') used to install packages
library("tidyverse")
weight_df <- read.csv(Week1/weight.csv)
